#include <MIDI.h>

MIDI_CREATE_DEFAULT_INSTANCE();

int i,j;
int binaryOuts[] = {39, 41, 43, 45, 47, 49, 51, 53}; //Latch 0 - 7 IN pins to Mega OUT pins
int writeLatch = 35; //When this is HIGH, latch can make changes; when LOW, latch will not change

//Pins to select octaves (connected to transistor bases)
const char pin_pitch_s0 = 33;
const char pin_pitch_s1 = 31;

int LED = 13;

//Array of frequencies:
int Freq[] = {
  0x0e,0x1e,0x2f,0x42,0x55,0x69,0x7f,0x95,0xae,0xc7,0xe2,0xff,0x00,0x00};
  
//DB      0EH                     ;C#
//DB      01EH                    ;D
//DB      2FH                     ;D#
//DB      42H                     ;E
//DB      55H                     ;F
//DB      69H                     ;F#
//DB      7FH                     ;G
//DB      95H                     ;G#
//DB      0AEH                    ;A
//DB      0C7H                    ;A#
//DB      0E2H                    ;B
//DB      0FFH                    ;C


byte channel;
byte pitch;
byte velocity;

void setup() 
{
    MIDI.setHandleNoteOn(handleNoteOn);  
    MIDI.setHandleNoteOff(handleNoteOff);
    MIDI.begin(MIDI_CHANNEL_OMNI);

  //Set Octal Latch connections as OUTPUTS 
  for ( i = 0 ; i < 8 ; i ++ )
  {
    pinMode(binaryOuts[i], OUTPUT);
  }
  pinMode(writeLatch, OUTPUT);

  //Writes all Latch INs and Latch Write Enable LOW
  zero(); 

  //LED for monitoring things and introductory blink series
  pinMode(LED, OUTPUT);
  
}//CLOSE SETUP

void loop() 
{
    MIDI.read();
// 1. Confirmed MIDI is coming from Ableton
// 2. Confirmed Optocoupler is sending PWM signal
// 3. Confirm MIDI is read at Serial Port from Optocoupler:
// 4. Confirm Arduin is reading the correct MIDI note from Ableton
// 5. Write MIDI Note On code so that the Arduino does the correct things when note pressed
}//CLOSE LOOP

void handleNoteOn(byte channel, byte pitch, byte velocity)
{

// Blink LED to confirm that this method reads a NoteOn Message
blinkLED();

// Write Arduino Outputs to be sent to DAC based on pitch byte
DAC_write( pitch );

// Release pitch to DAC by activating Octal latch write and leave on for 300ms
latch_DAC();



  
}
void handleNoteOff(byte channel, byte pitch, byte velocity)
{
    // Do something when the note is released.
    // Note that NoteOn messages with 0 velocity are interpreted as NoteOffs.
}

// Operations related to reading/writing MIDI

//DAC Write can write pitches or velocities
void DAC_write ( char command_byte )
{
  int temp;
  for (char this_bit = 0; this_bit < 8; this_bit++)
  {
    temp = command_byte;
    if ( 1 << this_bit & temp )
      digitalWrite(binaryOuts[this_bit],HIGH);
      else
      digitalWrite(binaryOuts[this_bit],LOW);
      
  }
}

void latch_DAC()
{
 digitalWrite (writeLatch, HIGH);
 delayMicroseconds(300);
 digitalWrite (writeLatch, LOW); 
} 

//Chooses 0, 1, 2, 3 octave
int get_octave (int note) {
  if (note>0)
     return ((note-1)/12);
  else
     return 0;    
}

void set_octave(int oct) {
  if (oct==0)
   {
   digitalWrite (pin_pitch_s0, LOW);  
   digitalWrite (pin_pitch_s1, LOW);
   }   
    
   else if (oct==1)
   {
   digitalWrite (pin_pitch_s0, HIGH);  
   digitalWrite (pin_pitch_s1, LOW);
   }
   
   else if (oct==2)
   {
   digitalWrite (pin_pitch_s0, LOW);  
   digitalWrite (pin_pitch_s1, HIGH);
   }
 
   else if (oct>2)
   {
   digitalWrite (pin_pitch_s0, HIGH);  
   digitalWrite (pin_pitch_s1, HIGH);
   }
   
}




void zero() {
  for (i = 0 ; i < 8; i++)
  {
    digitalWrite( binaryOuts[i], LOW );
  }
  digitalWrite( writeLatch, HIGH ); //HIGH disables write, because connected thru inv. buffer
}

void blinkLED()         // Basic blink function
{
        digitalWrite(LED,HIGH);
        delay(50);
        digitalWrite(LED,LOW);
        delay(50);
}
