#include <MIDI.h>

MIDI_CREATE_DEFAULT_INSTANCE();

int i, j;
int binaryOuts[] = {39, 41, 43, 45, 47, 49, 51, 53}; //Latch 0 - 7 IN pins to Mega OUT pins
int writeLatch = 35; //When this is HIGH, latch can make changes; when LOW, latch will not change

//Pins to select octaves (connected to transistor bases)
const char pin_pitch_s0 = 33; // Controls pin 10 (A) on MUX
const char pin_pitch_s1 = 31; // Controls pin 9 (B) on MUX

//Pins to select comparators to turn "ON" for a moment to capture a voltage sample
const char pin_pitch_sh = 28; // Controls analog switch ON/OFF via analog sw pin 13
const char pin_vel_sh = 30; // Controls analog switch ON/OFF via analog sw pin 5


//General variables:
unsigned int count = 0;
unsigned int temp = 0;

//LEDs for monitoring purposes:
int LED = 13;
int LED1 = 8;
int LED2 = 9;
int LED3 = 10;


//Array of frequencies:
int Freq[] = {
  0x0e, 0x1e, 0x2f, 0x42, 0x55, 0x69, 0x7f, 0x95, 0xae, 0xc7, 0xe2, 0xff, 0x00, 0x00
};

//DB      0EH                     ;C#
//DB      01EH                    ;D
//DB      2FH                     ;D#
//DB      42H                     ;E
//DB      55H                     ;F
//DB      69H                     ;F#
//DB      7FH                     ;G
//DB      95H                     ;G#
//DB      0AEH                    ;A
//DB      0C7H                    ;A#
//DB      0E2H                    ;B
//DB      0FFH                    ;C


byte channel;
byte pitch;
byte velocity;

void setup()
{ 
  MIDI.setHandleNoteOn(handleNoteOn);
  MIDI.setHandleNoteOff(handleNoteOff);
  MIDI.begin(MIDI_CHANNEL_OMNI);

  //Set Octal Latch connections as OUTPUTS
  for ( i = 0 ; i < 8 ; i ++ )
  {
    pinMode(binaryOuts[i], OUTPUT);
  }
  
  pinMode(writeLatch, OUTPUT);

  pinMode(pin_pitch_s0, OUTPUT);
  pinMode(pin_pitch_s1, OUTPUT);

  //Writes all Latch INs and Latch Write Enable LOW
  zero();

  //LED for monitoring things and introductory blink series
  pinMode(LED, OUTPUT);
  pinMode(LED1, OUTPUT);
  pinMode(LED2, OUTPUT);
  pinMode(LED3, OUTPUT);

  digitalWrite(LED, LOW);
  digitalWrite(LED1, LOW);
  digitalWrite(LED2, LOW);
  digitalWrite(LED3, LOW);
}//CLOSE SETUP

void loop()
{
  MIDI.read();
}//CLOSE LOOP

void handleNoteOn(byte channel, byte note, byte velocity)
{
  int octave_in;
  int pitch_in;

  octave_in = get_octave(note);
  pitch_in = get_pitch(note);

  if (octave_in == 0 )
  {
    digitalWrite(LED1, HIGH);
    delay(100);
    digitalWrite(LED1, LOW);
  }
  if (octave_in == 1 )
  {
    digitalWrite(LED3, HIGH);
    delay(100);
    digitalWrite(LED3, LOW);
  }
  
  if (pitch_in == 0 )
  {
    digitalWrite(LED2, HIGH);
    delay(100);
    digitalWrite(LED2, LOW);
  }
  
  set_octave( octave_in );
  set_pitch( pitch_in , octave_in , note );
}
void handleNoteOff(byte channel, byte note, byte velocity)
{
  // Do something when the note is released.
  // Note that NoteOn messages with 0 velocity are interpreted as NoteOffs.
DAC_write( 0 );
latch_DAC();

}

// Operations related to reading/writing MIDI

//DAC Write can write pitches or velocities
void DAC_write ( char command_byte )
{
  int temp;
  for (char this_bit = 0; this_bit < 8; this_bit++)
  {
    temp = command_byte;
    if ( 1 << this_bit & temp )
      digitalWrite(binaryOuts[this_bit], HIGH);
    else
      digitalWrite(binaryOuts[this_bit], LOW);

  }
}

void latch_DAC()
{
  digitalWrite (writeLatch, HIGH);
  delayMicroseconds(300);
  digitalWrite (writeLatch, LOW);
}

//get_pitch determines C#0 -> C1
//get_pitch will always return a note number in the first octave, e.g., note 122 returns note 1
int get_pitch (int note) {

  if (note > 0)
    return ( (note - 1) - ((note - 1) / 12) * 12);
  else
    return 0;
}

//Chooses 0, 1, 2, 3 octave
int get_octave (int note) {
  if (note > 0)
    return ((note - 1) / 12);
  else
    return 0;
}

void set_pitch(int p, int oct, int note) {
  int freq_out;

  // p is 0 for C. p goes from 0 to 11.
  // In octave 0, C outputs 0V (DAC=0)
  // In higher octaves, C outputs 3V (DAC=255)
  // The first note of next octave is note 1, C# (Freq[0])

  freq_out = Freq[p];

  if (note == 0)
    freq_out = 0;

  DAC_write( freq_out );
  latch_DAC();
  sample_pitch();
}

void set_octave(int oct) {
  if (oct == 0)
  {
    digitalWrite (pin_pitch_s0, LOW);
    digitalWrite (pin_pitch_s1, LOW);
  }

  else if (oct == 1)
  {
    digitalWrite (pin_pitch_s0, HIGH);
    digitalWrite (pin_pitch_s1, LOW);
  }

  else if (oct == 2)
  {
    digitalWrite (pin_pitch_s0, LOW);
    digitalWrite (pin_pitch_s1, HIGH);
  }

  else if (oct > 2)
  {
    digitalWrite (pin_pitch_s0, HIGH);
    digitalWrite (pin_pitch_s1, HIGH);
  }

}

void sample_pitch()
{
  digitalWrite (pin_pitch_sh, HIGH);
  delayMicroseconds(300);
  digitalWrite (pin_pitch_sh, LOW);
}

void sample_velocity()
{
  digitalWrite (pin_vel_sh, HIGH);
  delayMicroseconds(300);
  digitalWrite (pin_vel_sh, LOW);
}





void zero() {
  for (i = 0 ; i < 8; i++)
  {
    digitalWrite( binaryOuts[i], LOW );
  }
  digitalWrite( writeLatch, HIGH ); //HIGH disables write, because connected thru inv. buffer
}

void blinkLED()         // Basic blink function
{
  digitalWrite(LED, HIGH);
  delay(50);
  digitalWrite(LED, LOW);
  delay(50);
}
